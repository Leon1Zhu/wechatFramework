(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{49:function(t,l,i){"use strict";i.r(l);var a=i(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,l=t.$createElement,i=t._self._c||l;return i("div",{staticClass:"content"},[i("h2",{attrs:{id:"架构图"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#架构图","aria-hidden":"true"}},[t._v("#")]),t._v(" 架构图")]),i("p",[i("img",{attrs:{src:"http://otdc3q7z7.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9B%BE.png",alt:"微服务架构图"}})]),i("h2",{attrs:{id:"api网关"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#api网关","aria-hidden":"true"}},[t._v("#")]),t._v(" API网关")]),i("ul",[i("li",[i("strong",[t._v("定义:")]),i("ul",[i("li",[t._v("API网关是一个服务器，是系统的唯一入口。从面向对象设计的角度看，它与外观模式类似。\nAPI网关方式的核心要点是，所有的客户端和消费端都通过统一的网关接入微服务，在网关层处理所有的非业务功能。通常，网关也是提供REST/HTTP的访问API。服务端通过API-GW注册和管理服务。")])])]),i("li",[i("strong",[t._v("作用:")]),i("ul",[i("li",[t._v("API网关是一个服务器，是系统的唯一入口。API网关封装了系统的内部架构，为每一个客户提供一个定制的API。它还具有其他职责，如身份验证、监控、负载均衡、缓存等。API网关负责服务请求路由、组合及协议转换。客户端的所有请求都首先经过API网关，然后由它将请求路由到合适的微服务。")]),i("li",[t._v("API网关也是解决访问认证、报文转换、访问统计等问题的。不仅增加了后台服务的响应量，还增加了后台服务的复杂性。")])])]),i("li",[i("strong",[t._v("优点:")]),i("ul",[i("li",[t._v("对外部和内部进行了隔离，保障了后台服务的安全性。")]),i("li",[t._v("对外访问控制由网络层面转换成了运维层面，减少变更的流程和错误成本。")]),i("li",[t._v("减少客户端与服务的耦合，服务可以独立运行。通过网关做映射。")]),i("li",[t._v("通关网关层的聚合，减少外部访问的频次，提升访问效率。")]),i("li",[t._v("节约后端服务开发成本，减少上线风险。")]),i("li",[t._v("服务使用了多种协议，因为不同的协议有不同的应场景用，比如可能同时使用 HTTP, AMQP, gRPC使用API网关可以统一调度。")]),i("li",[t._v("服务端在多个服务器上部署可以自动集群")]),i("li",[t._v("对所有的服务接口做统一的安全拦截和权限校验")])])])]),i("h2",{attrs:{id:"微服务"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#微服务","aria-hidden":"true"}},[t._v("#")]),t._v(" 微服务")]),i("ul",[i("li",[i("strong",[t._v("定义")]),i("ul",[i("li",[t._v("微服务将系统模块切分成多个细小服务，每个细小服务分开开发和部署，服务之间通过轻量级的通讯接口实现内部调用。")])])]),i("li",[i("strong",[t._v("作用")]),i("ul",[i("li",[t._v("将复杂的单体应用分解成一个个微小的服务。")]),i("li",[t._v("可以使得不同的服务之间实现不同的功能。")])])]),i("li",[i("strong",[t._v("优点")]),i("ul",[i("li",[t._v("将复杂的应用分解之后使得大问题分解成多个小问题解决，减少耦合，互不影响。")]),i("li",[t._v("方便以后的维护和重构，减少维护的成本和工作量。")]),i("li",[t._v("不需要再对不同框架的使用而烦恼。每个服务之间相互独立，不会互相作用，这给一套系统，不同框架提供了可能。")]),i("li",[t._v("微服务便于开发、部署和变更，升级某个服务不会影响整个系统。每个服务功能比较少，方便业务变更。")])])])]),i("h2",{attrs:{id:"服务发现"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#服务发现","aria-hidden":"true"}},[t._v("#")]),t._v(" 服务发现")]),i("ul",[i("li",[i("p",[i("strong",[t._v("定义")])]),i("ul",[i("li",[t._v("在微服务架构中，微服务实例的网络位置发生变化是一种常态，所以必须提供一种机制，使得服务消费者在服务提供者的网络位置发生变化时，能够及时获得最新的位置信息，一般是提供一个网络位置稳定的服务注册中心，服务提供者的网络位置被注册到注册中心，并在网络位置发生变化的时候及时更新，而服务消费者定期向注册中心获取服务提供者的最新位置信息。")])])]),i("li",[i("p",[i("strong",[t._v("模式")])]),i("p",[i("strong",[t._v("1.客户端发现模式")]),i("img",{attrs:{src:"http://otdc3q7z7.bkt.clouddn.com/96EABEEB-6018-45D5-B1CB-E401591081E2.png",alt:"客户端发现模式图"}})]),i("ul",[i("li",[i("strong",[t._v("工作方式")]),i("ul",[i("li",[t._v("当服务实例启动的时候，它的网络地址被注册到服务注册中心。当该实例终止的时候，该地址从服务注册中心移除。服务实例的注册通常使用心跳机制定期刷新。")])])]),i("li",[i("strong",[t._v("客户端发现模式的优缺点")]),i("ul",[i("li",[t._v("优点：\n"),i("ul",[i("li",[t._v("这个模式相对更直接一点，除了服务注册中心，没有要改变的地方；")]),i("li",[t._v("因为客户端了解可用的服务实例，它能做出智能、针对特定应用的负载均衡决策，比如使用一致性哈希。")])])]),i("li",[t._v("缺点：\n"),i("ul",[i("li",[t._v("这种模式的一个重要的缺陷是它将客户端与服务注册中心耦合在一起。你必须为服务客户端使用的每种编程语言和框架都实现服务发现逻辑；\n"),i("strong",[t._v("2.服务端发现模式")]),i("img",{attrs:{src:"http://otdc3q7z7.bkt.clouddn.com/20170715135600567.png",alt:"服务端发现模式"}})])])])])]),i("li",[i("strong",[t._v("工作方式")]),i("ul",[i("li",[t._v("当服务启动的时候,服务端通过负载均衡器向服务发送请求。负载均衡器查询服务注册中心并路由每个请求到可用的服务实例。")])])]),i("li",[i("strong",[t._v("服务端发现模式的优缺点")]),i("ul",[i("li",[t._v("优点：\n"),i("ul",[i("li",[t._v("服务发现的细节从客户端抽象出来，客户端只需要给负载均衡器发请求即可。这种方式避免为服务客户端使用的每种编程语言和框架都实现服务发现逻辑；")]),i("li",[t._v("一些部署环境免费提供了这种功能，无需再自己开发。")])])]),i("li",[t._v("缺点：\n"),i("ul",[i("li",[t._v("除非部署环境提供负载均衡器，否则它又是另一个需要设置和管理的高度可用的系统组件。")])])])])])])])]),i("h2",{attrs:{id:"云配置"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#云配置","aria-hidden":"true"}},[t._v("#")]),t._v(" 云配置")]),i("p",[i("img",{attrs:{src:"http://otdc3q7z7.bkt.clouddn.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E4%BA%91%E9%85%8D%E7%BD%AE.png",alt:"云配置示意图"}})]),i("ul",[i("li",[i("strong",[t._v("定义")]),i("ul",[i("li",[t._v("微服务架构允许将应用的配置文件放在远程服务器上，修改远程服务器的配置之后自动刷新所有服务的配置文件，无须重启服务。")])])]),i("li",[i("strong",[t._v("作用")]),i("ul",[i("li",[t._v("单体应用将配置文件打包在项目中发布，配置发生变更只需更改配置后重启即可。微服务采用分布式架构，一个系统可能由成百上千个应用组成，一旦某个配置发生变更，修改配置的成本极大，甚至导致系统长时间无法提供服务，而使用云配置则可以很大程度上优化和解决这些问题。")])])])]),i("h2",{attrs:{id:"日志采集"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#日志采集","aria-hidden":"true"}},[t._v("#")]),t._v(" 日志采集")]),i("p",[i("img",{attrs:{src:"http://otdc3q7z7.bkt.clouddn.com/%E6%97%A5%E5%BF%97%E9%87%87%E9%9B%86%E7%B3%BB%E7%BB%9F.png",alt:"日志采集系统可视化"}})]),i("ul",[i("li",[i("strong",[t._v("定义")]),i("ul",[i("li",[t._v("微服务架构的分布式和集群特性使得当系统出错时，错误的定位变的十分复杂，这就需要一款配套的日志采集系统进行日志收集、分析、预警。")])])]),i("li",[i("strong",[t._v("作用")]),i("ul",[i("li",[t._v("方便了对系统发生的错误进行排查和解决，无需再进行复杂的分析。")]),i("li",[t._v("日志通过日志转化服务后入库存储，通过可视化系统，对系统的运行情况可以有一个全面的分析。")])])])]),i("h2",{attrs:{id:"uaa"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#uaa","aria-hidden":"true"}},[t._v("#")]),t._v(" UAA")]),i("ul",[i("li",[i("strong",[t._v("定义")]),i("ul",[i("li",[t._v("UAA全称为user accounting and authorizing service，用户账户和授权服务，基于Oauth2.0标准，支持Oauth2.0的所有授权方式。微服务框架采用UAA做为系统的统一认证服务， UAA负责用户登录、系统接入和令牌发放。")])])]),i("li",[i("strong",[t._v("作用")]),i("ul",[i("li",[t._v("由于微服务是关于构建大多数独立自主的应用程序，使用UAA可以让用户拥有一致的用户体验，不会注意到请求由不同的程序提供，并且可以具有单独的安全配置。")]),i("li",[t._v("在维护集中角色的同时，需要在每个微服务中配置详细的访问权限。微服务应该知道每个用户的权限，并且必须对传入的请求授权。")]),i("li",[t._v("使用UAA进行权限管理。可以最大程度上为微服务系统提供安全保障")])])])])])}],!1,null,null,null);l.default=r.exports}}]);